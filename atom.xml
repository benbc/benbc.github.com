<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pig, satisfied]]></title>
  <link href="http://benbc.github.com/atom.xml" rel="self"/>
  <link href="http://benbc.github.com/"/>
  <updated>2013-03-24T21:48:34+00:00</updated>
  <id>http://benbc.github.com/</id>
  <author>
    <name><![CDATA[Ben Butler-Cole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visualizing CloudFormation templates]]></title>
    <link href="http://benbc.github.com/blog/2013/03/24/visualizing-cloudformation-templates/"/>
    <updated>2013-03-24T19:45:00+00:00</updated>
    <id>http://benbc.github.com/blog/2013/03/24/visualizing-cloudformation-templates</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <a href="http://aws.amazon.com/cloudformation/">CloudFormation</a> a lot recently to
manage AWS resources. I&#8217;m impressed with a lot of the functionality it
provides and it has allowed us to delete a lot of code on my current
project which was needed to handle edge cases in provisioning AWS
resources (eventual consistency issues, for example).</p>

<p>After a couple of months using it seriously, I only have four
complaints about CloudFormation:</p>

<ul>
<li>Stack lifecycle operations (create/update and delete) are not
idempotent.</li>
<li>Notification topics can only be set up at stack-creation time, so
if the topic gets accidentally deleted there is no way to get
notifications from the stack.</li>
<li>Creation and modification of resources in the stack is serialized,
which makes operations on large stacks very slow.</li>
<li>The template syntax is <em>horrible</em>: hard to write and even harder to
read.</li>
</ul>


<!--more-->


<p>I can&#8217;t claim to have a better solution to the syntax problem. Given
the constraints, the current syntax is probably reasonable; and the
language itself is extremely well thought-out. Perhaps the long-term
solution is to treat the JSON as an intermediary form and write
bindings for individual languages to generate it.</p>

<p>However, as things stand, once stacks have more than a couple of
resources in them, I find it hard to keep track of what is going on.
So I&#8217;ve written <a href="https://github.com/benbc/cloud-formation-viz">a tool</a> to vizualize templates. It reads
template JSON and spits out <a href="http://www.graphviz.org/">Graphviz</a> dot format which can
be used to generate an image.</p>

<p><img src="http://benbc.github.com/images/EC2_Untargeted_Launch_with_EBS_Volume.svg" width="400" title="'EC2 untargeted launch with EBS volume'" ></p>

<p>The examples in this post are from the <a href="http://aws.amazon.com/cloudformation/aws-cloudformation-templates/">sample templates</a> provided by AWS. You can find generated images for all
those samples <a href="https://github.com/benbc/cloud-formation-viz/tree/master/samples">here</a>.</p>

<p><img src="http://benbc.github.com/images/AutoScalingMultiAZWithNotifications.svg" width="700" title="'Auto-scaling multi-AZ with notifications'" ></p>

<p>I&#8217;d love to hear from you if you think this is useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A thin layer over Enlive]]></title>
    <link href="http://benbc.github.com/blog/2013/02/09/a-thin-layer-over-enlive/"/>
    <updated>2013-02-09T19:10:00+00:00</updated>
    <id>http://benbc.github.com/blog/2013/02/09/a-thin-layer-over-enlive</id>
    <content type="html"><![CDATA[<p>In my <a href="http://benbc.github.com/blog/2013/01/27/a-simple-enlive-example/">last post</a> I showed a simple use of Enlive to
create a web application with a common layout for all pages. I
resisted the temptation to introduce any abstractions because I wanted
to make it absolutely clear how to use the building blocks that Enlive
provides.</p>

<p>But my fingers were itching the whole time to abstract away some of
the wrinkles and I couldn&#8217;t let it rest until I&#8217;d had a play to see
what it looks like. So here is a very thin layer over Enlive that
manifests some of the structure that I saw.</p>

<!--more-->


<p>Here&#8217;s the code we ended up with last time. There is a <code>layout</code>
template that is used to wrap the two pages (<code>index</code> and <code>show</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">things</span> <span class="p">[</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span> <span class="s">&quot;four&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">extract-body</span> <span class="p">[</span><span class="nv">html</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">at</span> <span class="nv">html</span> <span class="p">[</span><span class="o">#</span><span class="p">{</span><span class="ss">:html</span> <span class="ss">:body</span><span class="p">}]</span> <span class="nv">unwrap</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftemplate</span> <span class="nv">layout</span> <span class="s">&quot;layout.html&quot;</span> <span class="p">[</span><span class="nv">title</span> <span class="nv">content</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="o">#</span><span class="p">{</span><span class="ss">:title</span> <span class="ss">:h1</span><span class="p">}]</span> <span class="p">(</span><span class="nf">content</span> <span class="nv">title</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:div.content</span><span class="p">]</span> <span class="p">(</span><span class="nf">substitute</span> <span class="p">(</span><span class="nf">extract-body</span> <span class="nv">content</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">show</span> <span class="p">[</span><span class="nv">things</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">at</span> <span class="p">(</span><span class="nf">html-resource</span> <span class="s">&quot;show.html&quot;</span><span class="p">)</span>
</span><span class='line'>             <span class="p">[</span><span class="ss">:li</span><span class="p">]</span> <span class="p">(</span><span class="nf">clone-for</span> <span class="p">[</span><span class="nv">thing</span> <span class="nv">things</span><span class="p">]</span> <span class="p">(</span><span class="nf">content</span> <span class="nv">thing</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nb">index </span><span class="p">(</span><span class="nf">html-resource</span> <span class="s">&quot;index.html&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">layout</span> <span class="s">&quot;Front page&quot;</span> <span class="nv">index</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/show&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">layout</span> <span class="s">&quot;Show things&quot;</span> <span class="p">(</span><span class="nf">show</span> <span class="nv">things</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d like to find a way to clarify the <em>page</em> and <em>layout</em> concepts in
the code. I&#8217;ll use macros to define them, so that I get the
define-and-assign style effect which I think is appropriate for
important entities like this.</p>

<p>Layouts first. There is some slightly tricky stuff here, stripping off
unwanted <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags, which we can hide. Let&#8217;s assume
that every layout will have one main piece of content, which we can
define by convention will go into <code>div.content</code>; but we&#8217;ll allow each
template to define other slots and substitutions for them.</p>

<p>So we want the layout definition for our example above to look like
this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deflayout</span> <span class="nv">layout</span> <span class="s">&quot;layout.html&quot;</span> <span class="p">[</span><span class="nv">title</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="o">#</span><span class="p">{</span><span class="ss">:title</span> <span class="ss">:h1</span><span class="p">}]</span> <span class="p">(</span><span class="nf">enlive/content</span> <span class="nv">title</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This defines a function (<code>layout</code>) which takes a single argument
(<code>title</code>) and returns an Enlive <em>template</em>&mdash;another function that
takes the page&#8217;s content and returns the rendered HTML. We&#8217;re
effectively currying the <code>layout</code> function defined in the raw example
because we want to specify <code>title</code> and <code>content</code> at different points.</p>

<p>Here is how we would use it, without changing anything else.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="p">((</span><span class="nf">layout</span> <span class="s">&quot;Front page&quot;</span><span class="p">)</span> <span class="nv">index</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/show&quot;</span> <span class="p">[]</span> <span class="p">((</span><span class="nf">layout</span> <span class="s">&quot;Show things&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">show</span> <span class="nv">things</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s what <code>deflayout</code> looks like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">deflayout</span> <span class="p">[</span><span class="nb">name </span><span class="nv">source</span> <span class="nv">args</span> <span class="o">&amp;</span> <span class="nv">forms</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nb">name </span><span class="o">~</span><span class="nv">args</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">enlive/template</span> <span class="o">~</span><span class="nv">source</span> <span class="p">[</span><span class="nv">content#</span><span class="p">]</span>
</span><span class='line'>                      <span class="p">[</span><span class="ss">:div.content</span><span class="p">]</span> <span class="p">(</span><span class="nf">enlive/substitute</span> <span class="p">(</span><span class="nf">extract-body</span> <span class="nv">content#</span><span class="p">))</span>
</span><span class='line'>                      <span class="o">~@</span><span class="nv">forms</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now pages. There are two different kinds of page: dynamic ones,
like <code>show</code>, which take one or more parameters and transform their
HTML and static ones, like <code>index</code>, with neither parameters nor
transformations. We&#8217;d like to make defining and calling both types
simple. We&#8217;d also like to specify the layout when defining the page
and hide its application. Here&#8217;s what we&#8217;re aiming for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="nv">show</span> <span class="s">&quot;show.html&quot;</span> <span class="p">(</span><span class="nf">layout</span> <span class="s">&quot;Show things&quot;</span><span class="p">)</span> <span class="p">[</span><span class="nv">things</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:li</span><span class="p">]</span> <span class="p">(</span><span class="nf">enlive/clone-for</span> <span class="p">[</span><span class="nv">thing</span> <span class="nv">things</span><span class="p">]</span> <span class="p">(</span><span class="nf">enlive/content</span> <span class="nv">thing</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="nb">index </span><span class="s">&quot;index.html&quot;</span> <span class="p">(</span><span class="nf">layout</span> <span class="s">&quot;Front page&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s the definition of <code>defpage</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defpage</span>
</span><span class='line'>  <span class="p">([</span><span class="nb">name </span><span class="nv">source</span> <span class="nv">layout</span><span class="p">]</span>
</span><span class='line'>     <span class="o">`</span><span class="p">(</span><span class="k">def </span><span class="o">~</span><span class="nv">name</span>
</span><span class='line'>        <span class="p">(</span><span class="o">~</span><span class="nv">layout</span> <span class="p">(</span><span class="nf">enlive/html-resource</span> <span class="o">~</span><span class="nv">source</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">([</span><span class="nb">name </span><span class="nv">source</span> <span class="nv">layout</span> <span class="nv">args</span> <span class="o">&amp;</span> <span class="nv">forms</span><span class="p">]</span>
</span><span class='line'>     <span class="o">`</span><span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nb">name </span><span class="o">~</span><span class="nv">args</span>
</span><span class='line'>        <span class="p">(</span><span class="o">~</span><span class="nv">layout</span> <span class="p">(</span><span class="nf">enlive/at</span> <span class="p">(</span><span class="nf">enlive/html-resource</span> <span class="o">~</span><span class="nv">source</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">~@</span><span class="nv">forms</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates functions for parameterized pages and simple values for
static ones to simplify calling them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="nv">index</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/show&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">show</span> <span class="nv">things</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">not-found</span> <span class="s">&quot;Not Found&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the complete code, in a working project, <a href="https://github.com/benbc/simple-enlive-example/blob/abstractions/src/simple_enlive_example/main.clj">here</a>.</p>

<p>This refactoring is obviously overkill for a tiny example like this,
but something like it could be useful on a real project. It meets the
two objectives, anyway: clarifying the important concepts and hiding
some of the fiddly details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why software development methodologies rock]]></title>
    <link href="http://benbc.github.com/blog/2012/08/01/why-software-development-methodologies-rock/"/>
    <updated>2012-08-01T20:24:00+01:00</updated>
    <id>http://benbc.github.com/blog/2012/08/01/why-software-development-methodologies-rock</id>
    <content type="html"><![CDATA[<p>(This post was insprired by a sneak preview of <a href="http://continuousdelivery.com/2012/08/why-software-development-methodologies-suck/" title="Why software development methodologies suck">a blog post</a> by Jez Humble.)</p>

<p>Methodologies or other defined practices can have value in so far as
they cause people to reflect on and criticise what they are
doing. Often it&#8217;s the <em>adoption</em> of a new approach that brings
benefits, rather than the approach itself.</p>

<p>This is why consultants are all convinced that their approach is the
one-true-way. They tend to meet teams that have stopped reflecting and
so are in trouble. They introduce change and see that everything
magically starts to improve. A spot of attributional bias and they&#8217;re
convinced.</p>

<p>The subjects of their advice, however, see that things get worse again
after a while (because they&#8217;ve stopped reflecting). So they conclude
that methodology X is all very well, but in practice it doesn&#8217;t work
in the long term.</p>

<p>It takes a special kind of person and team to keep reflecting even
when there is no change agent. People who can do this without any
prompting are gold dust and don&#8217;t need a methodology. People who can
<em>nearly</em> do it benefit from <em>any</em> methodology that they can be
convinced by, because the existence of an ideal keeps them thinking
about how they are deviating from it (and it&#8217;s the thinking that
matters, not the extent of the deviation).</p>

<p>My experience has informed my opinion. My first job was for a small
software shop that followed a rigorous waterfall approach: strong
hierarchy, lots of documentation, estimation-by-loc-guessing, separate
development phases. They were extremely successful and repeatedly
delivered on-time and within-budget; I was miserable. My second job
was as a consultant (with <a href="http://www.thoughtworks.com">ThoughtWorks</a>).</p>
]]></content>
  </entry>
  
</feed>
