<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A blog]]></title>
  <link href="http://benbc.github.com/atom.xml" rel="self"/>
  <link href="http://benbc.github.com/"/>
  <updated>2012-08-02T13:09:42+01:00</updated>
  <id>http://benbc.github.com/</id>
  <author>
    <name><![CDATA[Ben Butler-Cole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why software development methodologies rock]]></title>
    <link href="http://benbc.github.com/blog/2012/08/01/why-software-development-methodologies-rock/"/>
    <updated>2012-08-01T20:24:00+01:00</updated>
    <id>http://benbc.github.com/blog/2012/08/01/why-software-development-methodologies-rock</id>
    <content type="html"><![CDATA[<p>(This post was insprired by a sneak preview of <a href="http://continuousdelivery.com/2012/08/why-software-development-methodologies-suck/" title="Why software development methodologies suck">a blog
post</a> by Jez Humble.)</p>

<p>Methodologies or other defined practices can have value in so far as
they cause people to reflect on and criticise what they are
doing. Often it&#8217;s the <em>adoption</em> of a new approach that brings
benefits, rather than the approach itself.</p>

<p>This is why consultants are all convinced that their approach is the
one-true-way. They tend to meet teams that have stopped reflecting and
so are in trouble. They introduce change and see that everything
magically starts to improve. A spot of attributional bias and they&#8217;re
convinced.</p>

<p>The subjects of their advice, however, see that things get worse again
after a while (because they&#8217;ve stopped reflecting). So they conclude
that methodology X is all very well, but in practice it doesn&#8217;t work
in the long term.</p>

<p>It takes a special kind of person and team to keep reflecting even
when there is no change agent. People who can do this without any
prompting are gold dust and don&#8217;t need a methodology. People who can
<em>nearly</em> do it benefit from <em>any</em> methodology that they can be
convinced by, because the existence of an ideal keeps them thinking
about how they are deviating from it (and it&#8217;s the thinking that
matters, not the extent of the deviation).</p>

<p>My experience has informed my opinion. My first job was for a small
software shop that followed a rigorous waterfall approach: strong
hierarchy, lots of documentation, estimation-by-loc-guessing, separate
development phases. They were extremely successful and repeatedly
delivered on-time and within-budget; I was miserable. My second job
was as a consultant (with <a href="http://www.thoughtworks.com">ThoughtWorks</a>).</p>
]]></content>
  </entry>
  
</feed>
